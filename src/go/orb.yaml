version: 2.1

description:  |
  CircleCI Orb for golang CI. Provides static analysis, go test, go build, amongst other things...
  see github page for more info: https://github.com/travelaudience/orbs

orbs:
  go: circleci/go@0.2.0
  protobuf: izumin5210/protobuf@0.1.0
  # the code-climate install with sudo is broken, we should migrate to using our own code-climate orb
  #   but this is first waiting for such an orb to be available, because inline orb referencing is not possible
  code-climate: afrase/code-climate@0.0.5

executors:
  go_executor:
    description: |
      The docker container to used to test & build Go projects.
      For test & code-climate reporting, using a specific executor with the CC_TEST_REPORTER_ID env variable set is required.
    parameters:
      version:
        description: golang version to use (docker tag)
        type: string
        default: "1.13"
      working_directory:
        description: directory path for this job
        type: string
        default: "."
      go_mod:
        description: set GO111MODULE env var
        type: enum
        enum: ["on", "off"]
        default: "on"
    docker:
      - image: circleci/golang:<<parameters.version>>
    working_directory: <<parameters.working_directory>>
    environment:
      GO111MODULE: <<parameters.go_mod>>

commands:
  vet:
    description: run go vet against code base
    steps:
      - run: go vet ./...
  staticcheck:
    description: run staticcheck against code base
    parameters:
      version:
        description: Version of staticcheck to install
        default: "2019.2.1"
        type: string
    steps:
      # directory change required due to https://github.com/dominikh/go-tools/issues/528
      - run: cd ../ && go get -u honnef.co/go/tools/cmd/staticcheck@<<parameters.version>>
      - run: staticcheck -unused.whole-program ./...
  lint:
    description: run golint against code base (not yet implemented in a way that only checks changed files)
    steps:
      # TODO: golangci-lint seems to be quite common
      - run: GO111MODULE=off go get -u golang.org/x/lint/golint
      # TODO: DISABLED:
      #       only changed files should be linted - check how helm version check does it
      #       else, look into bash cmds in https://circleci.com/orbs/registry/orb/qventus/terraform-lint
      - run: golint ./...

  # taken from circleci/go@0.2.0
  load-cache:
    description: "Load cached Go modules."
    parameters:
      key:
        description: "The cache key to use. The key is immutable."
        type: string
        default: "go-mod"
    steps:
      - restore_cache:
          keys:
            - << parameters.key >>-{{ checksum "go.mod"  }}
  save-cache:
    description: "Save Go modules to cache."
    parameters:
      key:
        description: "The cache key to use. The key is immutable."
        type: string
        default: "go-mod"
    steps:
      - save_cache:
          key: << parameters.key >>-{{ checksum "go.mod"  }}
          paths:
            - "/go/pkg/mod"

  make-gen:
    description: Execute make gen in order to rebuild the generated protobuf files locally
    steps:
      - run: GO111MODULE=off go get -u github.com/vektra/mockery/cmd/mockery
      - run: GO111MODULE=off go get -u golang.org/x/tools/cmd/goimports
      - run: make gen
  compare:
    description: Git diff to determine if there are any local changes that haven't been pushe to this branch
    steps:
      - run: git diff --exit-code -- .

  test:
    description: |
      A more extensive go test function that is parameterized
      There's already a pending PR here: https://github.com/CircleCI-Public/go-orb/pull/16
    parameters:
      code_path:
        description: which tests to run
        type: string
        default: "./..."
      race:
        description: run tests with -race option
        type: boolean
        default: true
      count:
        description: run each test and benchmark n times
        type: string
        default: "5" # the go default is: "1"
      failfast:
        description: do not start new tests after the first test failure
        type: boolean
        default: true
      short:
        description: tell long-running tests to shorten their run time
        type: boolean
        default: true
      parallel:
        description: |
          Allow parallel execution of test functions that call t.Parallel.
          The value of this flag is the maximum number of tests to run
          simultaneously
        type: string
        default: "1"
      coverprofile:
        description: file to save coverage profile
        type: string
        default: "cover-source.out"
      covermode:
        description: flag to set the coverage mode
        type: enum
        enum: ["set", "count", "atomic"]
        default: "atomic"  # the go default is: "set", however unless -race is enabled, in which case it is "atomic"
    steps:
      - run:
          command: >-
            go test
            <<# parameters.race >>-race<</ parameters.race >>
            -count=<<parameters.count>>
            -coverprofile=<<parameters.coverprofile>>
            <<# parameters.failfast >>-failfast<</ parameters.failfast >>
            <<# parameters.short >>-short<</ parameters.short >>
            -p <<parameters.parallel>>
            -covermode=<<parameters.covermode>>
            <<parameters.code_path>>
          name: '[go] Test'
  code-climate-install:
    description: |
      Install the Code Climate test reporter.
      Using custom command to make sudo install work (afrase/code-climate is broken)
    parameters:
      version:
        default: latest
        description: The version of Code Climate test reporter to download. (default latest)
        type: string
    steps:
      - run:
          command: |
            if [[ $(command -v cc-test-reporter) == "" ]]; then
              if which sudo > /dev/null; then
                sudo curl -s -o /usr/local/bin/cc-test-reporter -L https://codeclimate.com/downloads/test-reporter/test-reporter-<< parameters.version >>-linux-amd64
                sudo chmod +x /usr/local/bin/cc-test-reporter
              else
                curl -s -o /usr/local/bin/cc-test-reporter -L https://codeclimate.com/downloads/test-reporter/test-reporter-<< parameters.version >>-linux-amd64
                chmod +x /usr/local/bin/cc-test-reporter
              fi
            else
              echo "Test reporter is already installed."
            fi
          name: Downloading Code Climate test reporter
  submit_coverage:
    description:|
      Submit test analysis to Code Climate.
      Using custom command that takes in additional flags (afrase/code-climate is broken)
    parameters:
      additional_flags:
        description: Option to set prefix (or other params) (use "--prefix=v3")
        type: string
        default: ""
      coverage_file:
        description: The coverage file to format.
        type: string
        default: cover-source.out
      code_climate_file:
        description: The code climate file/path
        type: string
        default: coverage/codeclimate.json
    steps:
      # TODO: is: grep -v '.pb.go' && grep -v '.pqt.go'
      #       needed for the coverage output file??
      - run: cc-test-reporter format-coverage <<parameters.additional_flags>> <<parameters.coverage_file>> --input-type=gocov --output=<<parameters.code_climate_file>>
      - code-climate/upload-coverage

  build:
    description: "Go build package"
    parameters:
      package_name:
        description: the name to package the build as (used with -o ./bin/__)
        type: string
      import_path:
        description: path to the code to build (generic would be ./...)
        type: string
      cgo_value:
        default: "0"
        type: string
    steps:
      - run:
          command: |
            ver=$(git describe --tags --always --dirty)
            ld_flags="-X 'main.version=$ver'"
            CGO_ENABLED=<<parameters.cgo_value>> GOOS=linux go build -ldflags "$ld_flags" -a -o ./bin/<<parameters.package_name>> <<parameters.import_path>>
          name: '[go] Build'
      - persist_to_workspace:
          root: ./
          paths:
            - bin/<<parameters.package_name>>

jobs:
  checks:
    description: Vet, staticcheck, and lint of go code
    parameters:
      exec:
        description: Executor to use for this job
        type: executor
        default: go_executor
    executor: << parameters.exec >>
    steps:
      - checkout
      - go/load-cache
      - vet
      - staticcheck
      # - lint
      - go/save-cache

  protobuf_eval:
    description: Regenerate protobuf files to compare with auto-generated files pushed
    parameters:
      exec:
        description: Executor to use for this job
        type: executor
        default: go_executor
    executor: <<parameters.exec>>
    steps:
      - protobuf/install:
          version: 3.6.1 # 3.7.1 is available...
      - checkout
      - go/load-cache
      - make-gen
      - compare
      - go/save-cache

  test_and_coverage:
    description: Go test and upload of coverage to Code Climate
    parameters:
      additional_flags:
        description: Option to set code climate prefix (or other params) (use "--prefix=v3")
        type: string
        default: ""
      exec:
        description: Executor to use for this job (as described in the executor of this orb, this requires CC_TEST_REPORTER_ID env var)
        type: executor
    executor: << parameters.exec >>
    steps:
      - checkout
      - go/load-cache
      - code-climate-install
      - run: cc-test-reporter before-build
      - test
      - submit_coverage:
          additional_flags: <<parameters.additional_flags>>
      - go/save-cache
