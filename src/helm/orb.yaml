version: 2.1

description: |
  CircleCI Orb for helm CI. Provides helm package and pushing charts to github helm repo, amongst other things...
  see github page for more info: https://github.com/travelaudience/orbs

executors:
  helm-tester:
    description: The docker container to used to test & build Helm charts. See https://github.com/helm/chart-testing
    docker:
      - image: quay.io/helmpack/chart-testing:v2.4.0

commands:
  lint:
    description: Run helm validation with Chart Tester
    parameters:
      chart_test_config: &chart_test_config
        description: |
          Path to local config file with settings to be used by Chart Tester
          For example:
            helm-extra-args: --timeout 600
            validate-maintainers: false
        type: string
        default: ".circleci/helmTest.yaml"
    steps:
      - run: "ct lint --config <<parameters.chart_test_config>>"
  install:
    description: |
      If files changed, run a helm install in kind to test that the chart can be installed
      !!NOTE: this is not functional at this time!! docker within docker is not enabled at this time
    parameters:
      chart_test_config:
        description: |
          Path to local config file with settings to be used by Chart Tester
          For example:
            helm-extra-args: --timeout 600
            validate-maintainers: false
        type: string
        default: ".circleci/helmTest.yaml"
      kind_version:
        description: Version of Kind to be used
        type: string
        default: "v0.5.1"
      k8s_version:
        description: K8s version to be run with kind
        type: string
        default: "v1.15.0"
    steps:
      - run:
          command: |
            if [ "$(ct list-changed --config <<parameters.chart_test_config>>)" ];
            then
              echo "Installing kind..."
              curl -sSLo kind "https://github.com/kubernetes-sigs/kind/releases/download/<<parameters.kind_version>>/kind-linux-amd64"
              chmod +x kind
              mv kind /usr/local/bin/kind
              echo "Creating cluster..."
              // TODO: docker executable is required for this to run. IE, needs a different executor type
              kind create cluster --name "chart-testing" --config .circleci/kind-config.yaml --image "kindest/node:<<parameters.k8s_version>>" --wait 60s

              echo $(kubectl get nodes)
              kubectl delete storageclass standard
              kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml
              kubectl --namespace kube-system create sa tiller
              kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
              helm init --service-account tiller --upgrade --wait
              echo $(helm version)

              ct install
            else
              echo "no helm changes to test"
            fi
          name: '[helm] Install'
  package:
    description: "Package the helm chart(s)"
    parameters:
      chart_test_config:
        description: |
          Path to local config file with settings to be used by Chart Tester
          For example:
            helm-extra-args: --timeout 600
            validate-maintainers: false
        type: string
        default: ".circleci/helmTest.yaml"
      chart_package_path:
        description: The path where packaged charts will be saved (defaults to a local, relative path)
        type: string
        default: ".cr-release-packages"
    steps:
      - run:
          command: |
            rm -rf <<parameters.chart_package_path>>; mkdir <<parameters.chart_package_path>>
            ct list-changed --config <<parameters.chart_test_config>> | while IFS= read -r chart ; do
                echo "Packaging chart: '$chart'..."
                helm dependency build "$chart"

                # set the version different for incubator
                if [ "$CIRCLE_BRANCH" == "master" ]; then
                  helm package "$chart" --destination <<parameters.chart_package_path>>
                else
                  ver=$(helm inspect chart "$chart" | grep version | cut -d' ' -f2)
                  [[ -z $CIRCLE_TAG ]] && BRANCH="$CIRCLE_BRANCH" || BRANCH="$CIRCLE_TAG"
                  echo "packaging $chart with version: ${ver}-${BRANCH}"
                  helm package "$chart" -u --version "${ver}-${BRANCH}" --destination .cr-release-packages
                fi

                echo "'$chart' packaged"
                echo "-----"
            done
          name: '[helm] Package'
  push:
    description: "Push helm chart(s) to gitub repository. Includes a retry to handle synchronous pushes."
    parameters:
      chart_package_path:
        description: The path where packaged charts were saved (defaults to a local, relative path)
        type: string
        default: ".cr-release-packages"
      chart_git_repo: &chart_git_repo
        description: The github repo that keeps packaged charts
        type: string
      clone_depth:
        type: integer
        default: 25
      retry_count:
        type: integer
        default: 8
    steps:
      - run: git clone --depth <<parameters.clone_depth>> <<parameters.chart_git_repo>> .helmPath
      - run:
          command: |
            # Push update helm chart to github repo.
            #
            #  $ update_repo
            #
            function update_repo {
                cd .helmPath
                git config user.email "$GIT_EMAIL"
                git config user.name "$GIT_USERNAME"

                git fetch
                git reset --hard origin/master
                if ["$CIRCLE_BRANCH" == "master" ]; then
                  cp ../<<parameters.chart_package_path>>/* stable/
                else
                  cp ../<<parameters.chart_package_path>>/* incubator/
                fi
                git add .
                git commit -m "updating helm charts: $(ls ../<<parameters.chart_package_path>>)"
                git push --set-upstream origin master
            }

            # Retry a updating repo a specific numer of times until it exits successfully, with exponential back off.
            #
            #  $ retry 5 update_repo
            #
            function retry {
              local retries=$1
              shift

              local count=0
              until "$@"; do
                exit=$?
                wait=$((2 ** $count))
                count=$(($count + 1))
                if [ $count -lt $retries ]; then
                  echo "Retry $count/$retries exited $exit, retrying in $wait seconds..."
                  sleep $wait
                else
                  echo "Retry $count/$retries exited $exit, no more retries left."
                  return $exit
                fi
              done
              return 0
            }

            retry <<parameters.retry_count>> update_repo

jobs:
  validate:
    description: |
      Checkout, lint, and install charts into local k8s cluster (install is currently disabled).
    parameters:
      chart_test_config: *chart_test_config
      exec:
        description: The name of custom executor to use
        type: executor
        default: helm-tester
    executor: << parameters.exec >>
    steps:
      - checkout
      - lint:
          chart_test_config: <<parameters.chart_test_config>>
      # - install:
      #     chart_test_config: <<parameters.chart_test_config>>

  package_and_push:
    description: |
      Package and push charts that have changed. Pushed to github chart repository.
    parameters:
      chart_git_repo: *chart_git_repo
      exec:
        description: The name of custom executor to use
        type: executor
        default: helm-tester
    executor: << parameters.exec >>
    steps:
      - checkout
      - package
      - push:
          chart_git_repo: <<parameters.chart_git_repo>>
