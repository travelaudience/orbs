description: |
  Package the helm chart(s).
  You can add multiple chart repos by defining the following environment variable in your context
  CT_CHART_REPOS=repo_name1=repo_url1,repo_name2=repo_url2
parameters:
  chart_test_config:
    description: |
      Path to local config file with settings to be used by Chart Tester
      For example:
        helm-extra-args: --timeout 600
        validate-maintainers: false
    type: string
    default: ".circleci/helmTestConfig.yaml"
  chart_dir_override:
    description: |
      Due to 'ct list-changed' not working on master (see https://github.com/helm/chart-testing/pull/159)
      Need get changed charts through git command.
      Defaulting to searching in 'helm' dir to look for changes.
    type: string
    default: "helm"
  chart_package_path:
    description: The path where packaged charts will be saved (defaults to a local, relative path)
    type: string
    default: ".cr-release-packages"
  chart_stable_branch:
    description: The branch that should be used to store a chart in stable repository
    type: string
    default: "master"
steps:
  - run:
      shell: /bin/sh
      command: |
        set -e
        # Package up the chart to <<parameters.chart_package_path>>.
        #
        #  $ package_chart chart/path
        #
        function package_chart {
            chart=$1
            echo "Packaging chart: '$chart'..."
            helm dependency build "$chart"

            # set the version different for incubator
            if [ "$CIRCLE_BRANCH" == <<parameters.chart_stable_branch>> ]; then
              helm package "$chart" --destination <<parameters.chart_package_path>>
            else
              ver=$(helm inspect chart "$chart" | grep version | cut -d' ' -f2)
              [[ -z $CIRCLE_TAG ]] && BRANCH="$CIRCLE_BRANCH" || BRANCH="$CIRCLE_TAG"
              VERSION="$(echo "${ver}-${BRANCH}" | sed -r 's/[\/=_#]+/-/g')"
              echo "packaging $chart with version: ${VERSION}"
              helm package "$chart" -u --version "${VERSION}" --destination .cr-release-packages
            fi

            echo "'$chart' packaged"
            echo "-----"
        }

        # Hack to upgrade helm version
        which helm
        rm $(which helm)
        curl -LO "https://kubernetes-helm.storage.googleapis.com/helm-v2.17.0-linux-amd64.tar.gz" && mkdir -p "helm-v2.17.0" && tar -xzf "helm-v2.17.0-linux-amd64.tar.gz" -C "helm-v2.17.0" && ln -s "helm-v2.17.0/linux-amd64/helm" /bin/helm && ln -s "helm-v2.17.0/linux-amd64/helm" /usr/local/bin/helm && rm -f "helm-v2.17.0-linux-amd64.tar.gz"
        which helm

        helm init --client-only  || true  # this step is required for helm v2
        helm version -c
        if [ "$CT_CHART_REPOS" ]; then
            for i in $(echo $CT_CHART_REPOS | tr "," " ");
            do
                repo_name=$(echo "$i" | cut -d'=' -f1)
                repo_url=$(echo "$i" | cut -d'=' -f2)
                helm repo add $repo_name $repo_url
            done
        fi
        rm -rf <<parameters.chart_package_path>>; mkdir <<parameters.chart_package_path>>

        # 'ct list-changed' doesn't work on main branch
        #   see https://github.com/helm/chart-testing/pull/159
        if [ "$CIRCLE_BRANCH" == <<parameters.chart_stable_branch>> ]; then
            git diff --diff-filter=d --name-only $(git merge-base HEAD^ HEAD) -- <<parameters.chart_dir_override>>  | while IFS= read -r file ; do
                if echo "$file" | grep -q "/Chart.yaml"; then
                    chart=$(echo "$file" | sed 's/\/Chart.yaml$//')
                    package_chart $chart
                fi
            done
        else
            ct list-changed --config <<parameters.chart_test_config>> | while IFS= read -r chart ; do
                chart=$(echo $chart | sed 's/.*Skipping...//g' | sed 's/Version increment checking disabled.//g')
                if [ "$chart" == "" ]; then
                  continue
                fi
                package_chart $chart
            done
        fi
      name: "[helm] Package"
