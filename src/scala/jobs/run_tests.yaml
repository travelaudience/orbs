description: |
  Run unit tests and coverage optionally.

parameters:
  executor:
    description: Executor to use for this job
    type: executor
    default: scala
  cache_key:
    description: Checksum-based key used to identify cache
    type: string
    default: ''
  with_sbtcoverage:
    description: Whether to check code coverage with sbtcoverage
    type: boolean
    default: true

executor: << parameters.executor >>

steps:
  - read_workspace
  - read_cache:
      cache_key: << parameters.cache_key >>

  - run:
      name: Compile test code
      command: sbt +test:compile

  - when:
      condition: << parameters.with_sbtcoverage >>
      steps:
        - code-climate/install:
            version: 0.10.0
        - run: cc-test-reporter before-build
        - run:
            name: Check code coverage and run tests
            command: |
              if sbt coverageOn +test coverageOff coverageAggregate; then
                echo 'export TESTS_STATUS=0' >> $BASH_ENV
              else
                echo 'export TESTS_STATUS=1' >> $BASH_ENV
              fi

        # To upload in code climate UI
        - run:
            name: Find cobertura.xml coverage-report
            command: |
              mkdir -p coverage-reports
              cp "$(find . -type f -name 'cobertura.xml' -print)" coverage-reports/
        - code-climate/format_coverage:
            coverage_file: coverage-reports/cobertura.xml
            input_type: cobertura
        - code-climate/upload_coverage

        # To show in CirleCI UI Artifacts tab
        - run:
            name: Find coverage results
            command: |
              mkdir -p coverage-reports
              cp -r "$(find . -type d -name 'scoverage-report' -print)" coverage-reports/
        - store_artifacts:
            path: coverage-reports/scoverage-report
            destination: scoverage-report

        # Clean all reports to reduce the cache size
        - run:
            name: Clean coverage results
            command: rm -rf coverage-reports
  - unless:
      condition: << parameters.with_sbtcoverage >>
      steps:
        - run:
            name: Run tests
            command: |
              if sbt +test ; then
                echo 'export TESTS_STATUS=0' >> $BASH_ENV
              else
                echo 'export TESTS_STATUS=1' >> $BASH_ENV
              fi

  - run:
      name: Find test reports
      command: |
        mkdir -p test-reports
        find . -type f -regex ".*/target/test-reports/.*xml" -exec cp {} test-reports/ \;
  - store_test_results:
      path: test-reports

  # Clean test reports to reduce the cache size
  - run:
      name: Clean test reports
      command: rm -rf test-reports

  - run:
      name: Fail CI in case tests failed
      command: exit ${TESTS_STATUS}

  - write_cache:
      cache_key: << parameters.cache_key >>
  - write_workspace
